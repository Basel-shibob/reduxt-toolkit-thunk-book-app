{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const getBooks = createAsyncThunk('book/getBooks', async (_, thunkAPI) => {\n  const {\n    rejectWithValue\n  } = thunkAPI;\n\n  try {\n    const res = await fetch(\"http://localhost:3005/books\");\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const insertBook = createAsyncThunk('book/insertBooks', async (bookData, thunkAPI) => {\n  console.log(bookData);\n  const {\n    rejectWithValue\n  } = thunkAPI;\n\n  try {\n    const res = await fetch(\"http://localhost:3005/books\", {\n      method: 'POST',\n      body: JSON.stringify(bookData),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    });\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst bookSlice = createSlice({\n  name: 'book',\n  initialState: {\n    books: [],\n    isLoading: false,\n    error: null\n  },\n  extraReducers: {\n    // getbooks\n    [getBooks.pending]: (state, action) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    [getBooks.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.books = action.payload;\n    },\n    [getBooks.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    // insertbook\n    [insertBook.pending]: (state, action) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    [insertBook.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.books.push(action.payload);\n    },\n    [insertBook.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport default bookSlice.reducer;","map":{"version":3,"sources":["/home/ahmed/Documents/Basel's-work web/REACT JS/reduxt-toolkit-thunk-book-app/React/src/store/bookSlice.js"],"names":["createSlice","createAsyncThunk","getBooks","_","thunkAPI","rejectWithValue","res","fetch","data","json","error","message","insertBook","bookData","console","log","method","body","JSON","stringify","headers","bookSlice","name","initialState","books","isLoading","extraReducers","pending","state","action","fulfilled","payload","rejected","push","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const getBooks = createAsyncThunk(\n    'book/getBooks',\n\n    async (_, thunkAPI) => {\n        const { rejectWithValue } = thunkAPI;\n        try {\n            const res = await fetch(\"http://localhost:3005/books\");\n            const data = await res.json();\n            return data\n        } catch (error) {\n            return rejectWithValue(error.message);\n        }\n    })\n\nexport const insertBook = createAsyncThunk(\n    'book/insertBooks',\n    async (bookData, thunkAPI) => {\n        console.log(bookData);\n        const { rejectWithValue } = thunkAPI;\n        try {\n            const res = await fetch(\"http://localhost:3005/books\", {\n                method: 'POST',\n                body: JSON.stringify(bookData),\n                headers: { 'Content-type': 'application/json; charset=UTF-8', }\n            });\n            const data = await res.json();\n            return data\n        } catch (error) {\n            return rejectWithValue(error.message);\n        }\n    })\n\n\nconst bookSlice = createSlice({\n    name: 'book',\n\n    initialState: { books: [], isLoading: false, error: null },\n\n    extraReducers: {\n\n        // getbooks\n        [getBooks.pending]: (state, action) => {\n            state.isLoading = true;\n            state.error = null;\n        },\n        [getBooks.fulfilled]: (state, action) => {\n            state.isLoading = false;\n            state.books = action.payload;\n        },\n        [getBooks.rejected]: (state, action) => {\n            state.isLoading = false;\n            state.error = action.payload;\n        },\n\n        // insertbook\n        [insertBook.pending]: (state, action) => {\n            state.isLoading = true;\n            state.error = null;\n        },\n        [insertBook.fulfilled]: (state, action) => {\n            state.isLoading = false;\n            state.books.push(action.payload);\n        },\n        [insertBook.rejected]: (state, action) => {\n            state.isLoading = false;\n            state.error = action.payload;\n        },\n    },\n})\n\nexport default bookSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}